name: CD

on:
  release: # Release mode
    types:
      - published
  push: # Nightly mode
    branches:
      - cd # TODO 

jobs:
  setup:
    # If this is a push event, we need to remove and recreate the nightly release, so it tags the current commit.
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Remove old Nightly Release
        run: |
          RELEASE_ID=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases | jq  '.[] | select(.tag_name == "nightly") | .id')
          echo $RELEASE_ID
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/nightly
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          body: |
            This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          commit: ${{ github.sha }}
          name: Continuous Nightly Build
          prerelease: true
          tag: nightly
          token: ${{ secrets.GITHUB_TOKEN }}

  ubuntu_x86_64:
    needs: setup
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OUTPUT: endless-sky-amd64.tar.gz
      UPLOAD_URL: ${{ github.event.release.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev scons
      - name: Build Application
        run: scons -j $(nproc)
      - name: Package Application
        run: tar -czf ${{ env.OUTPUT }} sounds images/ data/ license.txt keys.txt icon.png endless-sky credits.txt copyright changelog
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Get Upload URL
        if: github.event_name == 'push'
        run: |
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
          echo ::set-env name=UPLOAD_URL::$( echo $RELEASES |  jq '.[] | select(.target_commitish == "${{ github.sha }}") | .upload_url')
      - name: Upload Application
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.OUTPUT }}
          asset_name: ${{ env.OUTPUT }}
          asset_content_type: application/gzip

  appimage_x86_64:
    needs: setup
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARCH: x86_64
      OUTPUT: endless-sky-x86_64.AppImage
      UPLOAD_URL: ${{ github.event.release.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev scons
      - name: Build Application
        run: |
          cp icons/icon_512x512.png endless-sky.png # We need an icon file with this name
          scons -j $(nproc) install DESTDIR=AppDir 
          # Inside an AppImage, the executable is a link called "AppRun" at the root of AppDir/.
          # Keeping the data files next to the executable is perfectly valid, so we just move them to AppDir/ to avoid errors.
          mv AppDir/usr/local/share/games/endless-sky/* AppDir/
      - name: Build AppImage
        run: |
          curl -L https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -o linuxdeploy && chmod +x linuxdeploy
          ./linuxdeploy --appdir AppDir -e endless-sky -d endless-sky.desktop -i endless-sky.png --output appimage
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Get Upload URL
        if: github.event_name == 'push'
        run: |
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
          echo ::set-env name=UPLOAD_URL::$( echo $RELEASES |  jq '.[] | select(.target_commitish == "${{ github.sha }}") | .upload_url')
      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.OUTPUT }}
          asset_name: ${{ env.OUTPUT }}
          asset_content_type: application/octet-stream

  windows_win64:
    needs: setup
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
      DIR_ESLIB: .\dev64
      OUTPUT: EndlessSky-win64.zip
    steps:
      - uses: actions/checkout@v2
      - name: Fetch development libraries
        run: |
          Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
          Expand-Archive win64-dev.zip -DestinationPath . -Force
          Remove-Item win64-dev.zip
      - name: Build Application
        run: |
          make -e -f .winmake -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors)
          COPY .\bin\pkgd\EndlessSky.exe EndlessSky.exe
          COPY ".\dev64\bin\*.dll" .
          COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libgcc_s_seh-1.dll .
          COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libstdc++-6.dll .
          COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libwinpthread-1.dll .
      - name: Package Application
        run: 7z a ${{ env.OUTPUT }} .\sounds\ .\images\ .\data\ *.dll license.txt keys.txt icon.png EndlessSky.exe credits.txt copyright changelog
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Get Upload URL
        if: github.event_name == 'push'
        run: |
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
          echo ::set-env name=UPLOAD_URL::$( echo $RELEASES |  jq '.[] | select(.target_commitish == "${{ github.sha }}") | .upload_url')
        shell: bash
      - name: Upload Application
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.OUTPUT }}
          asset_name: ${{ env.OUTPUT }}
          asset_content_type: application/zip

  macos:
    needs: setup
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OUTPUT: EndlessSky-macOS.zip
      UPLOAD_URL: ${{ github.event.release.upload_url }}
    steps:
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: brew install libpng libjpeg-turbo libmad sdl2 p7zip
      - name: Adjust library paths
        run: |
          install_name_tool -id "@rpath/libpng16.16.dylib" /usr/local/lib/libpng16.16.dylib
          install_name_tool -id "@rpath/libmad.0.2.1.dylib" /usr/local/lib/libmad.0.2.1.dylib
          install_name_tool -id "@rpath/libturbojpeg.0.dylib" /usr/local/opt/libjpeg-turbo/lib/libturbojpeg.0.dylib
          install_name_tool -id "@rpath/libSDL2-2.0.0.dylib" /usr/local/lib/libSDL2-2.0.0.dylib
      - name: Build Application
        run: xcodebuild -configuration "Release" -jobs $(sysctl -n hw.logicalcpu) -quiet
      - name: Package Application
        run: 7z a ${{ env.OUTPUT }} build/Release/Endless\ Sky.app
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with: 
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Get Upload URL
        if: github.event_name == 'push'
        run: |
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
          echo ::set-env name=UPLOAD_URL::$( echo $RELEASES |  jq '.[] | select(.target_commitish == "${{ github.sha }}") | .upload_url')
      - name: Upload Application
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.OUTPUT }}
          asset_name: ${{ env.OUTPUT }}
          asset_content_type: application/zip
